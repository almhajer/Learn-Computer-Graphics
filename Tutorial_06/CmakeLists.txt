cmake_minimum_required(VERSION 3.9)

project("Tutorial_06")

set(HEADER_FILES
	Window.h
	ShaderProgram.h
	Camera.h
	Rectangle.h
)

set(SOURCE_FILES
	Window.cpp
	main.cpp
	ShaderProgram.cpp
	Camera.cpp
	Rectangle.cpp
)	


add_executable(Tutorial_06
	${HEADER_FILES}
	${SOURCE_FILES}
)

target_link_libraries(Tutorial_06
	PUBLIC
		opengl32
		glfw3
		glew32
		
)



if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")

	add_custom_command(
    TARGET Tutorial_06 POST_BUILD
	
	COMMAND ${CMAKE_COMMAND} -E copy 
	${CMAKE_SOURCE_DIR}/external/glew/bin/Release/x64/glew32.dll
	$<TARGET_FILE_DIR:Tutorial_06>
)
else("${CMAKE_SIZEOF_VOID_P}" EQUAL "4")

add_custom_command(
    TARGET Tutorial_06 POST_BUILD
	
	COMMAND ${CMAKE_COMMAND} -E copy 
	${CMAKE_SOURCE_DIR}/external/glew/bin/Release/Win32/glew32.dll
	$<TARGET_FILE_DIR:Tutorial_06>
)

endif()

if(WIN32)
	target_compile_definitions(Tutorial_06
		PRIVATE
			OS_WINDOWS=1
	)
	target_compile_options(Tutorial_06
		PRIVATE
			/WX
	)
endif(WIN32)


target_compile_features(Tutorial_06 PUBLIC cxx_std_17)
set_target_properties(Tutorial_06 PROPERTIES
	CXX_EXTENSIONS OFF
)

target_include_directories(Tutorial_06
	PUBLIC
	${CMAKE_SOURCE_DIR}/external/glew/include
	${CMAKE_SOURCE_DIR}/external/glfw/include
	${CMAKE_SOURCE_DIR}/external/glm
)

if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")

	target_link_directories (Tutorial_06
	PUBLIC
	${CMAKE_SOURCE_DIR}/external/glew/lib/Release/x64
    ${CMAKE_SOURCE_DIR}/external/glfw/lib/x64/
)	
else("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")

	target_link_directories (Tutorial_06
	PUBLIC
	${CMAKE_SOURCE_DIR}/external/glew/lib/Release/Win32
	${CMAKE_SOURCE_DIR}/external/glfw/lib/Win32/
)
endif()